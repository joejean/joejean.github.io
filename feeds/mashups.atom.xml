<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Joe Jean</title><link href="https://www.joejean.net/" rel="alternate"></link><link href="https://www.joejean.net/feeds/mashups.atom.xml" rel="self"></link><id>https://www.joejean.net/</id><updated>2014-12-13T23:00:00+04:00</updated><entry><title>[Mashups Class] My Final Project</title><link href="https://www.joejean.net/articles/my-final-project/" rel="alternate"></link><published>2014-12-13T23:00:00+04:00</published><updated>2014-12-13T23:00:00+04:00</updated><author><name>Joe Jean</name></author><id>tag:www.joejean.net,2014-12-13:articles/my-final-project/</id><summary type="html">&lt;p&gt;For my final project I decided to build something that I myself needed: a motivational quote API.
For quite some time I had been searching the web for a quotes API and I was not able to find anything interesting, so I built one.&lt;/p&gt;
&lt;p&gt;I did not have any quotes. So I scraped &lt;a href="http://www.inc.com/jeff-haden/top-350-inspiring-motivational-quotes-to-tweet-and-share.html"&gt;this webpage&lt;/a&gt; which contains a list of 150 inspirational quotes. Then I created a database with those quotes.&lt;/p&gt;
&lt;p&gt;Once I got the database running, I planned a nice API whose documentation can be found &lt;a href="http://pumpmeup.herokuapp.com/apidoc"&gt;here&lt;/a&gt;. The next step was to implement the API using ExpressJS. This was a pretty easy and straightforward step.&lt;/p&gt;
&lt;p&gt;After building and testing the API, I built a simple application on top of it. The application lets the user like quotes, add quotes to the database, retrieve the top 10 quotes, and search quotes that contain specific keywords. The application can be accessed &lt;a href="http://pumpmeup.herokuapp.com/"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;One thing I was planning to include in the project was a sentiment analysis library. I installed &lt;a href="https://www.npmjs.com/package/sentiment"&gt;this one&lt;/a&gt;. I wanted to analyze every new quote that a user would submit and only save it to the database if it is a positive one. However, while doing some testing the sentiment analyzer gives a 90% negative score to the following quote:"Success is walking from failure to failure with no loss of enthusiasm". As a human, we can see that this is obviously a positive quote, even though it contains two negative words. But the sentiment analyzer is not as smart as we are. That's when I decided to give up on that feature. But I plan to get back to it and figure out a way to make it work.&lt;/p&gt;
&lt;p&gt;All in all, this was a really fun project to hack and I look forward to improving it in the near future.&lt;/p&gt;</summary><category term="mashups"></category><category term="programming"></category><category term="javascript"></category><category term="api"></category></entry><entry><title>[Mashups Class] Ideas for Second Project</title><link href="https://www.joejean.net/articles/ideas-for-second-project/" rel="alternate"></link><published>2014-10-21T17:40:00+04:00</published><updated>2014-10-21T17:40:00+04:00</updated><author><name>Joe Jean</name></author><id>tag:www.joejean.net,2014-10-21:articles/ideas-for-second-project/</id><summary type="html">&lt;p&gt;For my second project for this class, I have two ideas. I would like to implement one during this week
and work on the other when I have more free time. Okay, without further ado here they are.&lt;/p&gt;
&lt;p&gt;The first idea is to create an interactive map that represents the countries where the NYUAD student body
hails from. To implement this idea, I would need a dataset of all the countries represented in the student body.
And there are two ways I can get this data. One way is to ask someone from the office of Residential Education and the other way is to use the Facebook Graph API in order to retrieve the hometown of all the NYUAD students who are members of a student's secret group on Facebook. Then I would use &lt;a href="https://opendata.socrata.com/dataset/Country-List-ISO-3166-Codes-Latitude-Longitude/mnkm-8ram"&gt;this open API&lt;/a&gt; to get the geographical coordinates of each country. And finally, I would use &lt;a href="http://d3js.org/"&gt;D3.js&lt;/a&gt; to build an interactive map visualization of the content.&lt;/p&gt;
&lt;p&gt;The second one is to use data from the World Bank in order to build a site that allows someone to compare two given countries. So, the user would enter two country names and I would request data for those countries from the World Bank API and display the data in the forms of graphs/visualizations. For example the user can easily see the number of students who go to school in a give country. Again, here I plain to use &lt;a href="http://d3js.org/"&gt;D3.js&lt;/a&gt; to build the visualizations.&lt;/p&gt;
&lt;p&gt;Over the weekend, I will decide which one of those two ideas that I'm going to implement first.&lt;/p&gt;</summary><category term="mashups"></category><category term="programming"></category><category term="javascript"></category><category term="api"></category></entry><entry><title>[Mashups Class] My Favorite Class Materials So Far</title><link href="https://www.joejean.net/articles/my-favorite-class-materials-so-far/" rel="alternate"></link><published>2014-10-19T23:00:00+04:00</published><updated>2014-10-19T23:00:00+04:00</updated><author><name>Joe Jean</name></author><id>tag:www.joejean.net,2014-10-19:articles/my-favorite-class-materials-so-far/</id><summary type="html">&lt;p&gt;I can't believe we are already in the middle of this great class, in fact one of my favorite so far.
Over the past weeks, we have used a lot of great tutorials/videos and articles as learning materials for the class.
All of them were really great. Below is a list of &lt;em&gt;some&lt;/em&gt; of my favorites in no particular order.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://infoactive.co/data-design/ch15"&gt;Importance of Color, Font, and Icons&lt;/a&gt;: This article provides great tips on how to use colors, font and icons when designing. My biggest takeaway is the human's mind takes longer to understand a text in Serif than it it takes to understand content displayed in Sans-Serif.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="http://alistapart.com/article/css-positioning-101"&gt;CSS Positioning 101&lt;/a&gt;: This article is just priceless. Thanks to it I was finally able to fully understand how to leverage the power of CSS's position property and its values.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="http://eloquentjavascript.net"&gt;Eloquent JavaScript&lt;/a&gt;: This is one of the best JavaScript books I have read. I like to keep going back to it every time I need a refresher on some JavaScript topics.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/A_re-introduction_to_JavaScript"&gt;A re-introduction to JavaScript&lt;/a&gt;. This article by the Mozilla Developer Network is a great article that helped me understand some of the best JavaScript features in a clear and concise way.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="http://www.amazon.com/Dont-Make-Think-Revisited-Usability/dp/0321965515/ref=sr_1_1?s=books&amp;amp;ie=UTF8&amp;amp;qid=1414005937&amp;amp;sr=1-1&amp;amp;keywords=Don%27t+Make+Me+Think"&gt;Don't Make Me Think, Revisited by Steve Krug&lt;/a&gt;: This is hands down the best book I have read on User Experience design.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="http://www.smashingmagazine.com/2014/05/29/mystery-jquery-object-syntax-basic-introduction/"&gt;The Mystery Of The jQuery Object: A Basic Introduction &lt;/a&gt;: Great introduction to the JQuery object, the famous $.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="http://learn.jquery.com/"&gt;JQuery Documentation&lt;/a&gt;: Great learning resource for JQuery.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Well, I could spend the entire day listing resources here. As I said, all of the resources we have used for the class are just awesome. In fact, if you are reading this and are not part of the class and you are eager to learn JavaScript web development, I strongly recommend you check out Professor Craig's repository for the class &lt;a href="https://github.com/craigprotzel/Mashups"&gt;here&lt;/a&gt;.&lt;/p&gt;</summary><category term="mashups"></category><category term="programming"></category><category term="javascript"></category><category term="api"></category></entry><entry><title>[Mashups Class] First Project: San Francisco Graffiti Explorer</title><link href="https://www.joejean.net/articles/first-project-san-francisco-graffiti-explorer/" rel="alternate"></link><published>2014-10-01T16:01:00+04:00</published><updated>2014-10-01T16:01:00+04:00</updated><author><name>Joe Jean</name></author><id>tag:www.joejean.net,2014-10-01:articles/first-project-san-francisco-graffiti-explorer/</id><summary type="html">&lt;p&gt;For my first project for the Mashups class , I built a website --&lt;a href="http://joejean.github.io/SF_Graffiti/"&gt;available here&lt;/a&gt;-- that allows the user to explore graffiti spots in San Fransisco. In this article,
I'm going to provide some details on how I went about building the project.&lt;/p&gt;
&lt;p&gt;First of all, let me tell you some of the tools I used in this project. I used the
&lt;a href="https://data.sfgov.org/City-Infrastructure/Graffiti-30-Days/p6sg-7yp7"&gt;graffiti dataset from DataSF&lt;/a&gt;. This data set provides information--including geographic coordinates, status, and a photo when available-- about graffiti cases reported in the San Francisco area. I also used the &lt;a href="https://developers.google.com/maps/documentation/javascript/"&gt;Google Maps JavaScript API&lt;/a&gt;. And finally, I used &lt;a href="http://getbootstrap.com/"&gt;Bootstrap&lt;/a&gt; for the UI.&lt;/p&gt;
&lt;p&gt;My intention was just to allow any graffiti lovers, no matter where they are in the world, to explore some of the graffiti spotted in the San Francisco area.&lt;/p&gt;
&lt;p&gt;Essentially, the site includes a Google map that occupies half of the page. On the
map, there are markers. Each one represents the location of a graffiti spot. If the graffiti hasn't been washed out--it has an "open" status in the dataset--it is represented on the map with a blue marker. A black marker represents a graffiti that has been cleaned.&lt;/p&gt;
&lt;p&gt;Since there are about a thousand graffiti in the dataset, when I load all of their respective markers on the map it looks pretty messy. Most markers would sit on top of one another. To fix this, I used a small library called &lt;a href="http://google-maps-utility-library-v3.googlecode.com/svn/trunk/markerclusterer/docs/reference.html"&gt;MarkerClusterer.js&lt;/a&gt; which groups together all of the markers that are really close to each other. Then when the user clicks on the cluster, it displays all the markers that it contains.&lt;/p&gt;
&lt;p&gt;When the user clicks on a given marker, two things happen: 1) the Google street view of the location of that graffiti is loaded on the left 2) on the specific marker is loaded an info window which list the name of the street, the status of the graffiti and if available a link to a picture of the graffiti.&lt;/p&gt;
&lt;p&gt;The process I followed while building the site was simple.It was my first time working with the Google Maps API so I had to learn it. After learning the API, I thought about how I wanted the UI to look. Then I built the UI using mostly the Bootstrap framework with a some customization as well. After getting the UI  right, I wrote the JavaScript code. I used the functional style in my JavaScript code.&lt;/p&gt;
&lt;p&gt;Currently, the site works and it looks fine, but I do think it needs some improvements. I plan to add a feature where the user can filter the types of graffiti they want to see--open, closed, with or without pictures available. I also would like to rewrite the JavaScript code using an object oriented programming style.&lt;/p&gt;
&lt;p&gt;I will hopefully publish the second version soon.&lt;/p&gt;</summary><category term="mashups"></category><category term="programming"></category><category term="javascript"></category><category term="api"></category></entry><entry><title>[Mashups Class] How to set a default value for a function's parameter in Javascript &amp; first project idea</title><link href="https://www.joejean.net/articles/how-to-set-default-value-for-function-parameter-in-javascript/" rel="alternate"></link><published>2014-09-16T02:03:00+04:00</published><updated>2014-09-16T02:03:00+04:00</updated><author><name>Joe Jean</name></author><id>tag:www.joejean.net,2014-09-16:articles/how-to-set-default-value-for-function-parameter-in-javascript/</id><summary type="html">&lt;p&gt;This week  my homework has two parts. In the first part, I have to solve the three exercises found &lt;a href="http://eloquentjavascript.net/02_program_structure.html" target="_blank"&gt;at the end of chapter two&lt;/a&gt; in the book Eloquent Javascript. In the second part, I have to describe what I'm thinking about doing for my first single page app project, how the data flow might work, and what the experience of a user visiting the site would be like.&lt;/p&gt;
&lt;h3&gt;How to set a default value for function parameter in Javascript&lt;/h3&gt;
&lt;p&gt;The first exercise was to write a loop that makes seven calls to console.log to output the following triangle:&lt;/p&gt;
&lt;pre&gt;            #
            ##
            ###
            ####
            #####
            ######
            ####### &lt;/pre&gt;

&lt;p&gt;As my solution for this exercise, I decided to create a function&amp;mdash;&lt;code&gt;drawRightTriangle(height)&lt;/code&gt;&amp;mdash; that would take a parameter called &lt;code&gt;height&lt;/code&gt; which represents the height of the triangle. So, instead of seven calls to console.log, the program would make 3, 10, 12, etc. depending on the value provided by the user to the &lt;code&gt;height&lt;/code&gt; parameter. I also wanted to  give a default value to the parameter &lt;code&gt;height&lt;/code&gt; so that the user can alternatively call the function without passing any arguments, as in &lt;code&gt;drawRightTriangle()&lt;/code&gt;. Being a Python programmer, I quickly assumed
I could achieve this with a line as simple as &lt;code&gt;drawRightTriangle(height==8)&lt;/code&gt;, but it does not work like that in Javascript.
So, after a little bit of research, I found a &lt;a href="http://stackoverflow.com/questions/894860/set-a-default-parameter-value-for-a-javascript-function" target="_blank"&gt;Stackoverflow thread&lt;/a&gt; that shows how to do it using the "typeof" operator to test whether the paramter is &lt;code&gt;undefined&lt;/code&gt;. If it is, you assign it the default value, otherwise you just use it as it is, i.e , use the value provided by the user. The code is as follow: &lt;code&gt;height = typeof height !== 'undefined'? height: 7;&lt;/code&gt;. By the way, the &lt;code&gt;?&lt;/code&gt; is called the ternary operator&amp;mdash;&lt;code&gt;condition ? value_if_true : value_if_false&lt;/code&gt;. I could have achieved the same thing by using &lt;code&gt;if ... else&lt;/code&gt;. Here are the solutions for all three exercises:
&lt;pre&gt;
    &lt;code&gt;
      // Solutions to exercises from chapter 2 of Eloquent Javascript&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class="o"&gt;//&lt;/span&gt;&lt;span class="nt"&gt;1-&lt;/span&gt; &lt;span class="nt"&gt;Looping&lt;/span&gt; &lt;span class="nt"&gt;a&lt;/span&gt; &lt;span class="nt"&gt;triangle&lt;/span&gt;
    &lt;span class="nt"&gt;var&lt;/span&gt; &lt;span class="nt"&gt;drawRightTriangle&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nt"&gt;function&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nt"&gt;height&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="o"&gt;//&lt;/span&gt;&lt;span class="n"&gt;I&lt;/span&gt; &lt;span class="n"&gt;give&lt;/span&gt; &lt;span class="nb"&gt;height&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="nb"&gt;default&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt; &lt;span class="n"&gt;in&lt;/span&gt; &lt;span class="n"&gt;case&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;user&lt;/span&gt; &lt;span class="n"&gt;does&lt;/span&gt; &lt;span class="n"&gt;not&lt;/span&gt; &lt;span class="n"&gt;provide&lt;/span&gt; &lt;span class="n"&gt;any&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;
        &lt;span class="nb"&gt;height&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;typeof&lt;/span&gt; &lt;span class="nb"&gt;height&lt;/span&gt; &lt;span class="o"&gt;!==&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;undefined&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;?&lt;/span&gt; &lt;span class="nb"&gt;height&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="m"&gt;7&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="nb"&gt;block&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot; &amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="n"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;var&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nb"&gt;height&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="err"&gt;{&lt;/span&gt;
            &lt;span class="nb"&gt;block&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;block&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;#&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="n"&gt;console&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;block&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="err"&gt;}&lt;/span&gt;

    &lt;span class="o"&gt;//&lt;/span&gt;&lt;span class="nt"&gt;2-&lt;/span&gt; &lt;span class="nt"&gt;FizzBuzz&lt;/span&gt;
    &lt;span class="nt"&gt;var&lt;/span&gt; &lt;span class="nt"&gt;fizzBuzz&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nt"&gt;function&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nt"&gt;lowerLimit&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="nt"&gt;upperLimit&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;lowerLimit&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;typeof&lt;/span&gt; &lt;span class="n"&gt;lowerLimit&lt;/span&gt; &lt;span class="o"&gt;!==&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;undefined&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;?&lt;/span&gt; &lt;span class="n"&gt;lowerLimit&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="n"&gt;upperLimit&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;typeof&lt;/span&gt; &lt;span class="n"&gt;upperLimit&lt;/span&gt; &lt;span class="o"&gt;!==&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;undefined&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;?&lt;/span&gt; &lt;span class="n"&gt;upperLimit&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="m"&gt;100&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

        &lt;span class="n"&gt;for&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="n"&gt;var&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;lowerLimit&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;upperLimit&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="err"&gt;{&lt;/span&gt;
          &lt;span class="n"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="m"&gt;3&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="m"&gt;5&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="err"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;console&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;: FizzBuzz&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
          &lt;span class="p"&gt;}&lt;/span&gt;
          &lt;span class="nt"&gt;else&lt;/span&gt; &lt;span class="nt"&gt;if&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nt"&gt;i&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="nt"&gt;3&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="nt"&gt;0&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;console&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;: Fizz&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
          &lt;span class="p"&gt;}&lt;/span&gt;

          &lt;span class="nt"&gt;else&lt;/span&gt; &lt;span class="nt"&gt;if&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt; &lt;span class="nt"&gt;i&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="nt"&gt;5&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="nt"&gt;0&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;console&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;: Buzz&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
          &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="err"&gt;}&lt;/span&gt;
    &lt;span class="err"&gt;}&lt;/span&gt;

    &lt;span class="o"&gt;//&lt;/span&gt;&lt;span class="nt"&gt;3&lt;/span&gt; &lt;span class="nt"&gt;-&lt;/span&gt; &lt;span class="nt"&gt;Chess&lt;/span&gt;  &lt;span class="nt"&gt;Board&lt;/span&gt;
    &lt;span class="nt"&gt;var&lt;/span&gt; &lt;span class="nt"&gt;chessBoard&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nt"&gt;function&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nt"&gt;size&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;

        &lt;span class="nb"&gt;size&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;typeof&lt;/span&gt; &lt;span class="nb"&gt;size&lt;/span&gt; &lt;span class="o"&gt;!==&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;undefined&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;?&lt;/span&gt; &lt;span class="nb"&gt;size&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="m"&gt;8&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

        &lt;span class="n"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;var&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nb"&gt;size&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="err"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;var&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot; &amp;quot;&lt;/span&gt;
            &lt;span class="n"&gt;for&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;var&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nb"&gt;size&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="err"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="m"&gt;2&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="err"&gt;{&lt;/span&gt;
                &lt;span class="n"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="m"&gt;2&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  &lt;span class="n"&gt;line&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;#&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
                &lt;span class="n"&gt;else&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot; &amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;
            &lt;span class="nt"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

              &lt;span class="n"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="m"&gt;2&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  &lt;span class="n"&gt;line&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot; &amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
              &lt;span class="n"&gt;else&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;#&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;

            &lt;span class="err"&gt;}&lt;/span&gt;
            &lt;span class="nt"&gt;console&lt;/span&gt;&lt;span class="nc"&gt;.log&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nt"&gt;line&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
        &lt;span class="err"&gt;}&lt;/span&gt;
    &lt;span class="err"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/p&gt;
&lt;p&gt;You can run and test these functions by opening &lt;a href="/files/mashups/hmw_2.html" target="_blank"&gt; this file &lt;/a&gt;. Then, from that page open your browser's developer console&amp;mdash;ctrl+shift+k in Firefox&amp;mdash; and start playing around with the functions.&lt;/p&gt;
&lt;h3&gt;First project idea&lt;/h3&gt;
&lt;p&gt;For my first single page app, I don't really know what I want to do yet. At this point, all I know for sure now is I want to make something cool. One not-so-cool idea I have so far is to use the NY Times API and a text to speech API in order to allow a robot to read the news to the user. Not-so-cool, right? I know. I promise to come up with somehting cool. Please stay tuned.&lt;/p&gt;</summary><category term="mashups"></category><category term="programming"></category><category term="javascript"></category><category term="api"></category></entry><entry><title>[Mashups Class] Playing with an open API</title><link href="https://www.joejean.net/articles/playing-with-an-open-api/" rel="alternate"></link><published>2014-09-05T16:01:00+04:00</published><updated>2014-09-05T16:01:00+04:00</updated><author><name>Joe Jean</name></author><id>tag:www.joejean.net,2014-09-05:articles/playing-with-an-open-api/</id><summary type="html">&lt;p&gt;As part of my first homework for &lt;a href="https://github.com/craigprotzel/Mashups" target="_blank"&gt;Mashups: Creating with web API&lt;/a&gt;, I had to first find, post and describe an API that returns JSON data. &lt;/p&gt;
&lt;h3&gt;Initial Plan&lt;/h3&gt;
&lt;p&gt;After playing around with a couple of APIs, I decided to use the World Bank API. I like the fact that
one does not need a key to make requests to this API. And I also found the documentation
to be clear and useful.&lt;/p&gt;
&lt;p&gt;I use the following url &lt;code&gt;http://api.worldbank.org/incomeLevels/LIC/countries?format=json&lt;/code&gt;
in order to get a list of countries with income level classified as low income. As you can see four parameters are used
in the url. "incomeLevels" is used for information about all levels of income, "LIC" is an acronym that stands for
Low Level Income, and "countries" is the list of countries. By default, the World Bank API returns XML data. Since I wanted JSON, I had to explicitly specify that in the request url using &lt;code&gt;format=json&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;For the second part of the assignment, I created a small script that sends a request to the API with the url mentioned above
and display the data on a nicely formatted HTML page.  Even though my script was syntaxically correct, and the request to the server was successful &amp;mdash; this is confirmed by the debugging info showed in my broswer's developer/Javascript console &amp;mdash;I still could not retrieve any data returned by the API.&lt;/p&gt;
&lt;p&gt;After doing some research about the issue, I found out that  the problem was due to an &lt;a href="http://stackoverflow.com/questions/22186703/modifying-jquery-jsonp-callback-function"&gt;implementation issue with the World Bank API.&lt;/a&gt;  If you want to learn more about the problem click the  previous link.&lt;/p&gt;
&lt;h3&gt;Second Plan&lt;/h3&gt;
&lt;p&gt;So since the World Bank API was not doing the job, I did some more research and found another open&amp;mdash;authentication free&amp;mdash; API: The US government jobs API.
I use the following url &lt;code&gt;http://api.usa.gov/jobs/search.json?query=tech+jobs&lt;/code&gt;to request all open technology related positions offered by government agencies. And I got the data back, manipulated it and displayed it on an HTML page. The page can be accessed &lt;a href="/files/mashups/hmw_1.html" target="_blank"&gt; here. &lt;/a&gt; And here is the JS code that does the job:
&lt;pre&gt;&lt;code&gt;
$(document).ready(function(){&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;          $.ajax({

                url:&amp;quot;http://api.usa.gov/jobs/search.json?query=tech+jobs&amp;quot;,
                type: &amp;quot;GET&amp;quot;,
                dataType: &amp;quot;jsonp&amp;quot;,

                success: function(data){
                  $.each(data, function(index, job){
                    // Those are for debugging purpose
                    console.log(job.position_title);
                    console.log(job.url)
                    console.log(job.locations[0]);
                    console.log(job.organization_name);

                  // The following code will add the JSON content returned by the API to the DOM
                  var tr = $(&amp;#39;&amp;lt;tr/&amp;gt;&amp;#39;)
                    .appendTo($(&amp;#39;table&amp;#39;));
                  var td_1 = $(&amp;#39;&amp;lt;td/&amp;gt;&amp;#39;)
                      .appendTo(tr);
                  var td_2 = $(&amp;#39;&amp;lt;td/&amp;gt;&amp;#39;)
                      .appendTo(tr);
                  var aaa = $(&amp;#39;&amp;lt;a/&amp;gt;&amp;#39;)
                    .attr(&amp;#39;href&amp;#39;,job.url)
                    .attr(&amp;#39;target&amp;#39;,&amp;#39;_blank&amp;#39;)
                    .addClass(&amp;#39;job_title&amp;#39;)
                    .text(job.position_title)
                    .append(&amp;#39;&amp;lt;br /&amp;gt;&amp;#39;)
                    .appendTo(td_1);
                  var employer = $(&amp;#39;&amp;lt;span/&amp;gt;&amp;#39;)
                      .addClass(&amp;#39;employer&amp;#39;)
                      .text(job.organization_name)
                      .appendTo(td_1);
                  var span_state= $(&amp;#39;&amp;lt;span/&amp;gt;&amp;#39;)
                      .addClass(&amp;#39;state&amp;#39;)
                      .text(job.locations[0])
                      .appendTo(td_2);
                  });
                },

                 error: function() {
                    return console.log(&amp;quot;Failed&amp;quot;);
                    }
            });
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;});
&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;</summary><category term="mashups"></category><category term="programming"></category><category term="javascript"></category><category term="api"></category></entry></feed>