<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Joe Jean</title><link href="http://www.joejean.net/" rel="alternate"></link><link href="http://www.joejean.net/feeds/programming.atom.xml" rel="self"></link><id>http://www.joejean.net/</id><updated>2015-11-08T09:07:00+04:00</updated><entry><title>Moving My Personal Website from Heroku to Github Pages</title><link href="http://www.joejean.net/articles/deploying-my-personal-website-to-github-pages/" rel="alternate"></link><updated>2015-11-08T09:07:00+04:00</updated><author><name>Joe Jean</name></author><id>tag:www.joejean.net,2015-11-08:articles/deploying-my-personal-website-to-github-pages/</id><summary type="html">&lt;p&gt;When I first built my personal website I deployed it to Heroku. At that time Heroku was the best option for me because it offered a free tier and it was relatively easy to use. But one thing I did not like about it was that the application dyno&amp;mdash;the container that handles all the HTTP traffic to the site&amp;mdash; would go to sleep if my website receives no traffic in a 30-minute period. Consequently the next time someone tries to access the site it will take longer to load as the dyno will need to wake up first. &lt;/p&gt;
&lt;p&gt;The site is built with &lt;a href="http://docs.getpelican.com/en/3.6.3/"&gt;Pelican&lt;/a&gt; which is a static site generator written in Python. A static site generator basically takes text written in a plain text markup format such as Markdown and converts it to HTML pages using predefined templates. So, after defining the templates for my website, whenever I need to publish new content such as this article I only need to write raw text in a MarkDown file and Pelican will handle the rest for me. Among other advantages, this approach is easy to use and results in a really fast website that can be easily deployed to GitHub Pages. &lt;/p&gt;
&lt;p&gt;This weekend I decided to move my website from Heroku to GitHub Pages. Here is how I went about it.&lt;/p&gt;
&lt;h2&gt;Deploying the site to GitHub Pages&lt;/h2&gt;
&lt;p&gt;In order to publish a Pelican site to GitHub as a User Page, one needs to push the content of the output direrctory generated by Pelican to the master branch of their &lt;code&gt;&amp;lt;username&amp;gt;.github.io&lt;/code&gt; repository on GitHub.&lt;/p&gt;
&lt;p&gt;First, I created a new repository named &lt;a href="https://github.com/joejean/joejean.github.io"&gt;&lt;code&gt;joejean.github.io&lt;/code&gt;&lt;/a&gt; on GitHub. Note that this repository name must have the form &lt;code&gt;&amp;lt;github username&amp;gt;.github.io&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Secondly, I installed the Python package &lt;code&gt;ghp-import&lt;/code&gt; and issued the command &lt;code&gt;ghp-import output&lt;/code&gt;. This command updates the local gh-pages branch with the content of the output directory (creating the branch if it doesn’t already exist).&lt;/p&gt;
&lt;p&gt;And third, I issued the command &lt;code&gt;git push git@github.com:joejean/joejean.github.io.git gh-pages:master&lt;/code&gt; to push the content of the gh-pages branch to the master branch of the github repo where the site will live. After this the site was live and it could be accessed from http://joejean/github.io but I wanted to use my custom domain name "www.joejean.net".&lt;/p&gt;
&lt;h2&gt;Setting up the custom domain&lt;/h2&gt;
&lt;p&gt;I tried many different approaches while setting up the custom domain, but what follows is the only approach that worked for me. 
I started by creating a &lt;a href="https://github.com/joejean/joejean.github.io/blob/cname/CNAME"&gt;CNAME file&lt;/a&gt; with the content &lt;code&gt;www.joejean.net&lt;/code&gt; and commit it to a different branch&amp;mdash;which can have any name&amp;mdash; in the same &lt;code&gt;joejean.github.io&lt;/code&gt; repository. Then I merged that branch with the master branch of the &lt;code&gt;joejean.github.io&lt;/code&gt; repository. &lt;/p&gt;
&lt;p&gt;Then I opened the domain administration page at my domain name registrar and I created two A records which points respectivley to the GitHub IPs &lt;code&gt;192.30.252.153&lt;/code&gt; and &lt;code&gt;192.30.252.154&lt;/code&gt;. After that, the last step was to create a CNAME record for the subdomain &lt;code&gt;www.joejean.net&lt;/code&gt; that points to &lt;code&gt;joejean.github.io&lt;/code&gt;. The following screenshot summarizes the configurations:
&lt;img src ="http://www.joejean.net/images/dns.png" class="img-responsive img-rounded" /&gt;&lt;/p&gt;
&lt;p&gt;So now my site is being served from GitHub pages and loads with the same lightning speed no matter when it is accessed. It is important to note that GitHub Pages only work for static sites. &lt;/p&gt;</summary><category term="python"></category><category term="pelican"></category><category term="githubpages"></category></entry><entry><title>Is your Python loop followed by an else clause? If yes, read on</title><link href="http://www.joejean.net/articles/else-clause-in-python-loop/" rel="alternate"></link><updated>2015-08-01T11:38:00+04:00</updated><author><name>Joe Jean</name></author><id>tag:www.joejean.net,2015-08-01:articles/else-clause-in-python-loop/</id><summary type="html">&lt;p&gt;Today I decided to start my day by reading about &lt;a href="http://docs.quantifiedcode.com/python-code-patterns/"&gt;common anti-patterns in Python&lt;/a&gt; and how to fix them. An anti-pattern in the context of programming is a piece of code that solves a problem but that has the potential of having unintended bad consequences.&lt;/p&gt;
&lt;p&gt;One of those anti-patterns is the use of an else clause right after a loop without a break statement. As the article explains, the else clause following a loop is only executed when the loop sequence becomes empty. That means if the loop does not specify a break statement the else clause will always execute because eventually the loop sequence will become empty. They provided the following example code to illustrate the point:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
def contains_magic_number(list, magic_number):
    for i in list:
        if i == magic_number:
            print "This list contains the magic number."
    else:
        print "This list does NOT contain the magic number."

contains_magic_number(range(10), 5)
# This list contains the magic number.
# This list does NOT contain the magic number.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In the snippet of code above we see that because no &lt;code&gt;break&lt;/code&gt; statement was specified inside the &lt;code&gt;if&lt;/code&gt; block, the &lt;code&gt;else&lt;/code&gt; clause ends up being executed; which is obviously not the intended behaviour in this case. This can be fixed by adding a &lt;code&gt;break&lt;/code&gt; statement in the &lt;code&gt;if&lt;/code&gt; block as shown below:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
def contains_magic_number(list, magic_number):
for i in list:
    if i == magic_number:
        print "This list contains the magic number."
else:
    print "This list does NOT contain the magic number."

contains_magic_number(range(10), 5)
# This list contains the magic number.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Here because of the &lt;code&gt;break&lt;/code&gt; statement the loop will print the message and exit if the magic number is found in the list, resulting in the &lt;code&gt;else&lt;/code&gt; clause not being executed. So I think this is all great.&lt;/p&gt;
&lt;p&gt;But I was looking at the code and thinking that one could take this one step further by removing the &lt;code&gt;else&lt;/code&gt; clause and making the &lt;code&gt;contains_magic_number()&lt;/code&gt; function return &lt;code&gt;True&lt;/code&gt; or &lt;code&gt;False&lt;/code&gt; depending on whether the magic number is found in the list or not. So the code for this alternative solution would look as follow:&lt;/p&gt;
&lt;pre&gt;
    &lt;code&gt;
def contains_magic_number(list, magic_number):
    for i in list:
        if i == magic_number:
            return True
    return False

if contains_magic_number(range(10), 5):
    print "This list contains the magic number."
else:
    print "This list does NOT contain the magic number."

#This list contains the magic number
    &lt;/code&gt;
&lt;/pre&gt;

&lt;p&gt;What I like about this soulution is not only that it does not contain an &lt;code&gt;else&lt;/code&gt;clause but also the new &lt;code&gt;contains_magic_number()&lt;/code&gt;function is more reusable. Now we can easily use that function in parts of our code where we only need to check if the list contains the magic number and do something else other than printing a message on the screen. &lt;/p&gt;</summary><category term="programming"></category><category term="python"></category></entry><entry><title>My First Week At the Recurse Center</title><link href="http://www.joejean.net/articles/first-week-at-recurse-center/" rel="alternate"></link><updated>2015-05-31T11:38:00+04:00</updated><author><name>Joe Jean</name></author><id>tag:www.joejean.net,2015-05-31:articles/first-week-at-recurse-center/</id><summary type="html">&lt;p&gt;This summer I'm lucky to be attending the &lt;a href="http://www.recurse.com"&gt;Recurse Center (RC)&lt;/a&gt;. RC is a 12-week long self-directed retreat for programmers. It is a place one goes to become a better programmer by working on programming projects of one's interest. &lt;/p&gt;
&lt;p&gt;We started the first day, Monday the 26th of May, with some welcome talks by the RC founders, facilitators and employees. The Recursers from the first batch also gave us some really good advices. Then we proceeded with checkin for the day. During checkins we split into smaller groups and each person talks a little bit about what they did the previous day and what they are planning to do during the current day. Personally, checkins really help me stay on track.&lt;/p&gt;
&lt;p&gt;After checkin, I started working through the Nand to Tetris course materials where one learns how to build a computer from scratch. After a couple of hours, I lost interest and tried the &lt;a href="http://www.buildyourownlisp.com"&gt;build your own lisp course&lt;/a&gt; which is a course that teaches one how to build a Lisp with C. So far, I'm enjoying it while learning a lot about C and building a programming language. &lt;/p&gt;
&lt;p&gt;I tried not to do only one thing per day, so I ended up developing a &lt;a href="https://github.com/joejean/HNTopVoted"&gt;chrome extension&lt;/a&gt; that colors in red the score of the top 5 most voted posts on &lt;a href="http://news.ycombinator.com"&gt;Hacker News&lt;/a&gt;. I got at least two things out of this small project. First, I learned how to develop chrome extensions. Second, I enjoyed the satisfaction of finishing something I started.&lt;/p&gt;
&lt;p&gt;I wanted to start contributing to open source projects. So I paired with Tom, one of the facilitators at RC, who introduced me to the &lt;a href="http://www.bpython-interpreter.org/"&gt;bpython&lt;/a&gt; project. Tom taught me how to get acquainted  to the bpython code base, or any large code base for that matter, by making the program print something on the screen. To do that we first had to identify the main file which is run when we launch bpython. We did that by using the unix command “which” followed by the name of the program “bpython” in this case. “Which” is a unix utility that shows the full path of shell commands. I'm still in the process of playing around with bpython hoping that I can start contributing to the project soon.&lt;/p&gt;
&lt;p&gt;At RC, every Friday there is an optional interview preparation session. During this week's session we worked on a command line phone book application. In my &lt;a href="https://github.com/joejean/phonebook"&gt;implementation&lt;/a&gt; I used python with sqlite. Other people used JavaScript, Go, Java etc.. ; a reminder of how diverse Recursers are. Tom helped me and gave me some great feedback on my implementation. &lt;/p&gt;
&lt;p&gt;Overall, my first week at RC was a good one. At the beginning I was a little nervous and I was not comfortable revealing my ignorances. But as I interact more with the facilitators and fellow Recursers I'm becoming more and more comfortable saying “I don't know” which is something that is strongly encouraged at RC. After all, every time I keep my ignorances secret, I miss an opportunity to learn something new and get better. Jake Scruggs summed it up well when he said:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;"Tomorrow I need to look stupider and feel better about it. This staying quiet and trying to guess what's going on isn't working so well."&lt;/p&gt;
&lt;/blockquote&gt;</summary><category term="programming"></category><category term="summer2015"></category><category term="recurse center"></category></entry><entry><title>Continuous Integration and Continuous Delivery make life easier</title><link href="http://www.joejean.net/articles/continuous-integration-and-continuous-delivery-make-my-life-easier/" rel="alternate"></link><updated>2015-02-28T07:04:00+04:00</updated><author><name>Joe Jean</name></author><id>tag:www.joejean.net,2015-02-28:articles/continuous-integration-and-continuous-delivery-make-my-life-easier/</id><summary type="html">&lt;p&gt;I have been hearing the terms "continuous integration" and "continuous delivery" for quite some time. However, it wasn't until last week that I decided to not only learn more about them but also use them in my own projects.&lt;/p&gt;
&lt;p&gt;What is continuous integration? Continuous integration (CI) is a development practice where developers push code to a central repository several times a day. Every time code is pushed to the repository an automated build is run to verify that the new code did not cause any errors/bugs in the system. After the build is complete, the system will notify you whether it was successful —i.e. the system passes all the test cases— or not. CI helps avoid problems that might arise when integrating or merging code from different developers on a team or when one developer is integrating their code with existing code in the main repository.&lt;/p&gt;
&lt;p&gt;Continuous Delivery (CD), on the other end, automates the deployment of your new code to your production system as long as the build that ran during the integration step was successful. If the build is successful the CI/CD system will automatically pushes/deploys the code to production. If the build failed, the code won't be deployed to production.&lt;/p&gt;
&lt;p&gt;Such system makes my life, as a developer, so much easier since all I need to care about now is write code and push it to GitHub.&lt;/p&gt;
&lt;p&gt;So, I decided to set up a CI/CD for this blog. This was pretty easy using a platform called &lt;a href="https://circleci.com"&gt;CircleCi&lt;/a&gt;. They have a free plan which is just perfect for a small project like this blog.&lt;/p&gt;
&lt;p&gt;I also set up CI/CD for another project but this time I used a tool called Jenkins on a virtual private server (VPS) running Ubuntu. Jenkins is a popular open source CI tool. This option requires more configuration than the previous one, but it is worth trying as it gives you a better understanding of how CI/CD works. So, if you would like to give it a try, you may find &lt;a href="http://code.tutsplus.com/tutorials/setting-up-continuous-integration-continuous-deployment-with-jenkins--cms-21511"&gt;this tutorial&lt;/a&gt; helpful.&lt;/p&gt;
&lt;p&gt;Happy integrating/delivering!&lt;/p&gt;</summary><category term="python"></category><category term="programming"></category></entry><entry><title>How to run Python 2 and Python 3 together on Windows 7</title><link href="http://www.joejean.net/articles/how-to-run-python-2-and-python-3-together-on-windows-7/" rel="alternate"></link><updated>2014-08-31T11:38:00+04:00</updated><author><name>Joe Jean</name></author><id>tag:www.joejean.net,2014-08-31:articles/how-to-run-python-2-and-python-3-together-on-windows-7/</id><summary type="html">&lt;p&gt;I have always wanted to have both Python 2 and Python 3 installed and running on my Windows 7 computer, but I feared that installation was going to be a nightmare. However, today I put my fear aside and dove right into the task.&lt;/p&gt;
&lt;p&gt;At least two scenarios are possible. While my experience was with the first scenario, the second one is also possible. So here is how to approach each one:&lt;/p&gt;
&lt;h3&gt;Scenario 1: Python 2, virtualenv and virtualenvwrapper are already installed&lt;/h3&gt;
&lt;p&gt;My Windows 7 laptop already had Python 2, virtualenv and virtualenvwrapper installed&amp;mdash;so, I downloaded and installed
&lt;a target="_blank" href="https://www.python.org/downloads/"&gt; Python 3 &lt;/a&gt;. By default, any virtual environment I create would use Python 2. In order to make them also use Python 3, I would create them with the following command: &lt;code&gt;mkvirtualenv myenv -p c:\python3.4&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;But then, within that virtual environment, if I wanted to use Python 3, I would still have to call it explicitly using the command: &lt;code&gt;py -3&lt;/code&gt; otherwise it would still default to Python 2. I found this observation weird and  I decided to do a little experiment. I activated one of the virtual environments that were created without pointing to Python 3. Then, in the terminal I type: &lt;code&gt;py -3&lt;/code&gt; and, bam, it worked. Therefore, I came to the conclusion that installing Python 3 on my windows was enough for me to still use it in my virtual environments whenever I want to. I don't have to explicitly point my virtual environments to Python 3 with the &lt;code&gt;-p&lt;/code&gt; flag.&lt;/p&gt;
&lt;h3&gt;Scenario 2: Python is not installed&lt;/h3&gt;
&lt;p&gt;If Python is not already installed on your computer, you should install Python 3. And at the beginning of your Python files you would just add &lt;code&gt;#!python2&lt;/code&gt; or &lt;code&gt;#!python3&lt;/code&gt; depending on whether you want to use version 2 or version 3 of Python. Then, in order to run any of your Python programs, you would type: &lt;code&gt;py pythonfile.py&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Now, that I have both versions on my computer, I'm going to start exploring some of the interesting features of Python 3 while still keeping my Python code running.&lt;/p&gt;</summary><category term="python"></category><category term="programming"></category></entry><entry><title>5 Tips for writing more concise and elegant code in Python</title><link href="http://www.joejean.net/articles/5-tips-for-writing-more-concise-elegant-python/" rel="alternate"></link><updated>2014-03-06T09:07:00+04:00</updated><author><name>Joe Jean</name></author><id>tag:www.joejean.net,2014-03-06:articles/5-tips-for-writing-more-concise-elegant-python/</id><summary type="html">&lt;p&gt;Last week, I was reviewing some of the first lines of code I wrote when I was learning python three years ago. While they worked, I now realise that
there are many things I could have done in a more elegant and concise way. Of course, when learning a new programming language one is always 
encouraged to build things from scratch, to write one's own functions, classes or methods to do things even when such code might already exists. 
&lt;/p&gt;
&lt;p&gt;This approach is definitely useful for a beginner. However, once one understands the basics, it is a good idea to start using code and techniques already 
provided --at least by the programming language itself. This will not only help you build things faster but also -- in most cases -- make your code more concise and readable. 
The following are five tips that you can start using today to make your python code more concise and elegant. &lt;/p&gt;
&lt;h3&gt;1) Prefer the return statement to evaluate your expression and return its result for you&lt;/h3&gt;
&lt;p&gt;Sometimes you have a function that returns the result of an expression. Let's say it's a boolean expression, so the return value can be either 
true or false. One usually uses a  variable to store the result of the expression and then return that variable, such as this:
&lt;pre&gt;&lt;code&gt;
def isEven(a):
    if (a % 2)==0:
        result = True
    else:
        result = False
    return result
&lt;/code&gt;&lt;/pre&gt;
However, a more elegant way to reach the same result is to put the entire expression in the return statement and it will compute and return the result of the
expression as follow:
&lt;pre&gt;&lt;code&gt;
def isEven(a):
    return (a % 2)==0
&lt;/code&gt;&lt;/pre&gt;
This is possible because the return statement actually returns the result of evaluating an expression. And in case you are wondering, in python numbers eveluate to themselves.&lt;/p&gt;
&lt;h3&gt;2) Prefer Python's builtin &lt;code&gt;format()&lt;/code&gt; function to format your strings&lt;/h3&gt;
&lt;p&gt;Imagine you have an object called "Player" which has attributes such has name and age. Now imagine that you have
a function called printPlayerInfo() that prints the player's information. One would usually uses the plus sign (+) to concatenate the string literals with
the string variables, such as this:
&lt;pre&gt;&lt;code&gt;
def printPlayerInfo(Player):
    return "The player's name is "+Player.name+" and the player is "+str(Player.age)+" years old"
&lt;/code&gt;&lt;/pre&gt; &lt;br /&gt;
However, a more elegant way to do this is to use python's builtin format() function. Thus our function becomes:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
def printPlayerInfo(Player):
    return "The player Name is {Player.name} and the player is {Player.age} years old".format(Player=Player)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;As you can see, in addittion to making your code more readable, the format function spares the programmer the extra burden of casting all numbers to strings.   &lt;/p&gt;
&lt;h3&gt;3) Prefer a tuple instead of a temporary variable when swaping the values of two variables&lt;/h3&gt;
&lt;p&gt;When one wants to swap the values of two variables, they usually use a third variable as a temporary storage for one of the two values. Let's imagine that 
we want to swap the values of the variables &lt;code&gt;currentScore&lt;/code&gt; and &lt;code&gt;prevScore&lt;/code&gt;, one usually proceed as follow:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
currentScore = 34
prevScore = 23
temp = currentScore
currentScore = prevScore
prevScore = temp
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;However, this can be done more elegantly using a python tuple:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
currentScore = 34
prevScore = 23
(currentScore, prevScore) = (prevScore, currentScore)
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;4) Prefer list comprehension to create a new list out of an existing one&lt;/h3&gt;
&lt;p&gt;Imagine that you have a list of numbers,&lt;code&gt;firstList&lt;/code&gt; and you want to create a second list,&lt;code&gt;secondList&lt;/code&gt;  with all the even numbers - we assume there are some- contained 
in &lt;code&gt;firstList&lt;/code&gt;. Usually one would proceed as follow:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
firstList = [2283, 4, 567, 236, 4458]
secondList = []

for val in firstList:
    if val % 2 == 0:
        secondList.append(val)

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;However, a more elegant and pythonic way to do the same thing is to use list comprehension notation as follows:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
firstList = [2283, 4, 567, 236, 4458]
secondList = [ val for val in list1 if val%2 == 0]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Well, some people might argue that the first method is more comprehensible than the second one. I would say that such a view is influenced by their knowledge of 
other programming languages. Furthermore, list comprehension is a python specific feature which is created to make code more beautiful and concise. &lt;/p&gt;
&lt;h3&gt;5) Prefer the list's &lt;code&gt;count()&lt;/code&gt; method to count the number of times an item appears on the list:&lt;/h3&gt;
&lt;p&gt;Imagine that you have a list that has a couple of names for example. And, let's say you want to count the number of times a certain name appears on the list.
Usually one would proceed as follow:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
nameList = ["aaa", "bbb", "aaa", "ccc", "ddd"]
count =0
for name in nameList:
    if name == "aaa":
        count += 1

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;However, to achieve the same result you can simply use python's builtin list &lt;code&gt;count()&lt;/code&gt; method as follow:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt; 
nameList = ["aaa", "bbb", "aaa", "ccc", "ddd"]
count = nameList.count("aaa")
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The python list data type has more of those useful builtin methods that can not only make your life easier but aslo make your code more readable and concise. 
You can find them in the &lt;a href = "http://docs.python.org/2/tutorial/datastructures.html#more-on-lists" target="_blank"&gt; python documentation.&lt;/a&gt;
&lt;br /&gt;
&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;</summary><category term="python"></category><category term="programming"></category></entry></feed>